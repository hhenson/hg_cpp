name: Build and Test

on:
  push:
    branches:
      - '**'
    tags:
      - 'v_*.*.*'
  pull_request:

jobs:
  test:
    # Run tests on branch commits and PRs only
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')) }}
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.12"
      CMAKE_ARGS: "-DNB_USE_STABLE_ABI=ON -DCMAKE_CXX_STANDARD=23"
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Set up environment and install deps
        shell: bash
        run: |
          uv venv
          export CMAKE_ARGS=$CMAKE_ARGS
          uv tool install conan
          uv pip install -e .
          uv pip install pytest scikit-build-core nanobind
          uv tool run conan profile detect --force
      - name: Run tests
        run: |
          uv run pytest -q

  build:
    # Build wheels only on tags matching v_*.*.*
    if: startsWith(github.ref, 'refs/tags/v_')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # If you want to test multiple Python versions or compilers, you can also add them to the matrix.
        python-version: [3.12]
        # C++ standards, etc. can also be included, but here we keep it simple.
    runs-on: ${{ matrix.os }}
    env:
      # Common environment variables for all platforms.
      PYTHON_VERSION: "3.12"
      CMAKE_ARGS: "-DNB_USE_STABLE_ABI=ON -DCMAKE_CXX_STANDARD=23"

    steps:
      - uses: actions/checkout@v5
      
      - name: Set version from tag into pyproject
        shell: bash
        run: |
          REF="${GITHUB_REF_NAME}"
          if [[ "$REF" != v_* ]]; then
            echo "This build only runs for tags starting with v_. Got: $REF"
            exit 1
          fi
          VERSION="${REF#v_}"
          echo "Setting project version to: $VERSION"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          export VERSION="$VERSION"
          python - <<'PY'
          import os, re, pathlib, sys
          p = pathlib.Path("pyproject.toml")
          one = p.read_text(encoding="utf-8")
          ver = os.environ["VERSION"]
          new_s, n = re.subn(r'(?m)^version\s*=\s*"[^"]+"', f'version = "{ver}"', one)
          if n == 0:
              print("ERROR: Could not find version field in pyproject.toml", file=sys.stderr)
              sys.exit(1)
          p.write_text(new_s, encoding="utf-8")
          print(f"pyproject.toml version updated to {ver}")
          PY

      - name: Setup MSVC (Windows only)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          cache-suffix: "optional-suffix"
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv venv
          uv tool install conan
          uv tool install pytest
          uv pip install scikit-build-core numpy

      - name: Configure Conan Profile
        shell: bash
        run: |
          uv tool run conan profile detect --force

      - name: Conan Install
        shell: bash
        run: |
          # Detect architecture for the build
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            ARCH="armv8"
          else
            ARCH="x86_64"
          fi

          # Install and generate CMake config + toolchain into build/conan
          uv tool run conan install . --output-folder=build/conan --build=missing \
            -s build_type=Release -pr default -s compiler.cppstd=23 -s arch=$ARCH \
            -g CMakeDeps

          # Expose paths for the subsequent scikit-build / CMake run
          echo "CONAN_BUILD_DIR=$(pwd)/build/conan" >> $GITHUB_ENV
          echo "CMAKE_ARGS=$CMAKE_ARGS -DCMAKE_TOOLCHAIN_FILE=$CONAN_BUILD_DIR/conan_toolchain.cmake -DCMAKE_PREFIX_PATH=$CONAN_BUILD_DIR" >> $GITHUB_ENV

      - name: Build Python Wheel with scikit-build-core
        shell: bash
        run: |
          uv pip install build scikit-build-core
          # On Windows, use 'set' instead of 'export' for environment variables.
          # Use conditional logic for environment variable handling:
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            set CMAKE_ARGS=%CMAKE_ARGS%
            uv build --wheel
          else
            export CMAKE_ARGS=$CMAKE_ARGS
            uv build --wheel
          fi
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            uv tool install auditwheel
            # Use manylinux_2_28 for C++23 support (glibc 2.28+, Ubuntu 18.04+)
            uv tool run auditwheel repair dist/*.whl --plat manylinux_2_28_x86_64 -w wheelhouse
            rm dist/*.whl
            mv wheelhouse/*.whl dist/
            uv build --sdist
            ls -R dist/*
          fi

      - name: Test wheel
        shell: bash
        run: |
          uv pip install dist/*.whl
          # Run your tests here, for example:
          # pytest tests

      - name: Upload Wheels as Artifacts
        uses: actions/upload-artifact@v5
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*

  publish:
    # Only run if build job succeeded for all OSes
    needs: [ build ]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      # For PyPI's trusted publishing.
      id-token: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: "Install uv"
        uses: astral-sh/setup-uv@v7
      - uses: actions/download-artifact@v6
        with:
          pattern: wheels-*
          path: wheels
          merge-multiple: true
      - name: Publish to PyPi
        run: uv publish -v wheels/*
